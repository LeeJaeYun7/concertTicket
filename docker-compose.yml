version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 10s

  mysql:
    image: mysql:8.0
    container_name: mysql-container
    restart: always
    environment:
      MYSQL_DATABASE: concertticket
      MYSQL_PASSWORD: 1234
      MYSQL_ROOT_PASSWORD: 1234
    ports:
      - "3307:3306"
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 20s

  redis:
    image: redis:latest
    container_name: redis-container
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s

  websocket-server-1:
    build:
      context: ./websocket  # 웹소켓 서버의 Dockerfile 경로
    container_name: websocket-server-1
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      REDIS_HOST: redis-container
      REDIS_PORT: 6379

  websocket-server-2:
    build:
      context: ./websocket  # 웹소켓 서버의 Dockerfile 경로
    container_name: websocket-server-2
    ports:
      - "8082:8081"
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      REDIS_HOST: redis-container
      REDIS_PORT: 6379


  spring-server-1:
    image: concert-reservation-interfaces
    container_name: spring-server-1
    ports:
      - "8083:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      REDIS_HOST: redis-container
      REDIS_PORT: 6379


  spring-server-2:
    image: concert-reservation-interfaces
    container_name: spring-server-2
    ports:
      - "8084:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      REDIS_HOST: redis-container
      REDIS_PORT: 6379

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"  # Nginx가 외부에서 접근할 포트
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Nginx 설정 파일
    depends_on:
      - websocket-server-1
      - websocket-server-2

volumes:
  mysql-data:
  redis-data:
